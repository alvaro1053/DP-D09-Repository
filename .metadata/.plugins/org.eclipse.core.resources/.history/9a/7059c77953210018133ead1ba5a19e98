
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;

import repositories.RequestRepository;
import domain.Actor;
import domain.Admin;
import domain.Request;
import domain.Rende;
import domain.User;

@Service
@Transactional
public class RequestService {

	// Managed Repository
	@Autowired
	private RequestRepository		requestRepository;

	// Supporting Repository
	@Autowired
	private UserService				userService;

	@Autowired
	private ActorService			actorService;

	@Autowired
	private Validator				validatorService;


	// Constructors
	public RequestService() {
		super();
	}

	// Simple CRUD methods
	public Request create() {
		User principal;
		Request request;
		principal = this.userService.findByPrincipal();
		Assert.notNull(principal);

		request = new Request();

		return request;
	}

	public Request save(final Request request) {
		User principal;
		Request result;

		Assert.notNull(request);

		principal = this.userService.findByPrincipal();

		Assert.notNull(principal);

		result = this.requestRepository.save(request);

		return result;
	}

	public void delete(final Request request) {
		Assert.notNull(request);
		List<Request> updated,updated2;
		final User principal = this.userService.findByPrincipal();
		
		

		final Rende rende = request.getRende();
		final Collection<Request> requests = rende.getRequest();
		updated = new ArrayList<Request>(requests);
		updated.remove(request);
		rende.setRequest(updated);
		
		domain.Service service = request.getService();
		Collection<Request> requests2 = service.getRequest();
		updated2 = new ArrayList<Request>(requests2);
		updated2.remove(request);
		service.setRequest(updated2);
		

		this.requestRepository.delete(request);
	}
	

	public Request findOne(final int id) {
		final Actor principal = this.actorService.findByPrincipal();
		final Request res = this.requestRepository.findOne(id);
		if (principal instanceof User)
			Assert.isTrue(((User) principal).getRendes().contains(res.getRende()) || ((User) principal).getrSVPS().contains(res.getRende()) || principal instanceof Admin);
		return res;
	}

	
}
